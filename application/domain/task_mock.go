// Code generated by MockGen. DO NOT EDIT.
// Source: task.go

// Package domain is a generated GoMock package.
package domain

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockTaskUsecase is a mock of TaskUsecase interface.
type MockTaskUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockTaskUsecaseMockRecorder
}

// MockTaskUsecaseMockRecorder is the mock recorder for MockTaskUsecase.
type MockTaskUsecaseMockRecorder struct {
	mock *MockTaskUsecase
}

// NewMockTaskUsecase creates a new mock instance.
func NewMockTaskUsecase(ctrl *gomock.Controller) *MockTaskUsecase {
	mock := &MockTaskUsecase{ctrl: ctrl}
	mock.recorder = &MockTaskUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskUsecase) EXPECT() *MockTaskUsecaseMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskUsecase) Add(ctx context.Context, task Task) (Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, task)
	ret0, _ := ret[0].(Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockTaskUsecaseMockRecorder) Add(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskUsecase)(nil).Add), ctx, task)
}

// ListByUserID mocks base method.
func (m *MockTaskUsecase) ListByUserID(ctx context.Context, userID int) ([]Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockTaskUsecaseMockRecorder) ListByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockTaskUsecase)(nil).ListByUserID), ctx, userID)
}

// MockTaskCreator is a mock of TaskCreator interface.
type MockTaskCreator struct {
	ctrl     *gomock.Controller
	recorder *MockTaskCreatorMockRecorder
}

// MockTaskCreatorMockRecorder is the mock recorder for MockTaskCreator.
type MockTaskCreatorMockRecorder struct {
	mock *MockTaskCreator
}

// NewMockTaskCreator creates a new mock instance.
func NewMockTaskCreator(ctrl *gomock.Controller) *MockTaskCreator {
	mock := &MockTaskCreator{ctrl: ctrl}
	mock.recorder = &MockTaskCreatorMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskCreator) EXPECT() *MockTaskCreatorMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockTaskCreator) Add(ctx context.Context, task Task) (Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add", ctx, task)
	ret0, _ := ret[0].(Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Add indicates an expected call of Add.
func (mr *MockTaskCreatorMockRecorder) Add(ctx, task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockTaskCreator)(nil).Add), ctx, task)
}

// MockTaskRetriever is a mock of TaskRetriever interface.
type MockTaskRetriever struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRetrieverMockRecorder
}

// MockTaskRetrieverMockRecorder is the mock recorder for MockTaskRetriever.
type MockTaskRetrieverMockRecorder struct {
	mock *MockTaskRetriever
}

// NewMockTaskRetriever creates a new mock instance.
func NewMockTaskRetriever(ctrl *gomock.Controller) *MockTaskRetriever {
	mock := &MockTaskRetriever{ctrl: ctrl}
	mock.recorder = &MockTaskRetrieverMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTaskRetriever) EXPECT() *MockTaskRetrieverMockRecorder {
	return m.recorder
}

// List mocks base method.
func (m *MockTaskRetriever) List(ctx context.Context) ([]Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", ctx)
	ret0, _ := ret[0].([]Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List.
func (mr *MockTaskRetrieverMockRecorder) List(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockTaskRetriever)(nil).List), ctx)
}

// ListByUserID mocks base method.
func (m *MockTaskRetriever) ListByUserID(ctx context.Context, userID int) ([]Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListByUserID", ctx, userID)
	ret0, _ := ret[0].([]Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListByUserID indicates an expected call of ListByUserID.
func (mr *MockTaskRetrieverMockRecorder) ListByUserID(ctx, userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListByUserID", reflect.TypeOf((*MockTaskRetriever)(nil).ListByUserID), ctx, userID)
}
